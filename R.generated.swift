//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 9 files.
  struct file {
    /// Resource file `GET_hots.json`.
    static let gET_hotsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "GET_hots", pathExtension: "json")
    /// Resource file `GET_locals.json`.
    static let gET_localsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "GET_locals", pathExtension: "json")
    /// Resource file `GET_post-comments_success.json`.
    static let gET_postComments_successJson = Rswift.FileResource(bundle: R.hostingBundle, name: "GET_post-comments_success", pathExtension: "json")
    /// Resource file `GET_post_success.json`.
    static let gET_post_successJson = Rswift.FileResource(bundle: R.hostingBundle, name: "GET_post_success", pathExtension: "json")
    /// Resource file `GET_users-friends_success.json`.
    static let gET_usersFriends_successJson = Rswift.FileResource(bundle: R.hostingBundle, name: "GET_users-friends_success", pathExtension: "json")
    /// Resource file `GET_users-search_success.json`.
    static let gET_usersSearch_successJson = Rswift.FileResource(bundle: R.hostingBundle, name: "GET_users-search_success", pathExtension: "json")
    /// Resource file `GET_users_success.json`.
    static let gET_users_successJson = Rswift.FileResource(bundle: R.hostingBundle, name: "GET_users_success", pathExtension: "json")
    /// Resource file `POST_post-comments.json`.
    static let pOST_postCommentsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "POST_post-comments", pathExtension: "json")
    /// Resource file `POST_user-checks_success.json`.
    static let pOST_userChecks_successJson = Rswift.FileResource(bundle: R.hostingBundle, name: "POST_user-checks_success", pathExtension: "json")
    
    /// `bundle.url(forResource: "GET_hots", withExtension: "json")`
    static func gET_hotsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gET_hotsJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GET_locals", withExtension: "json")`
    static func gET_localsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gET_localsJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GET_post-comments_success", withExtension: "json")`
    static func gET_postComments_successJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gET_postComments_successJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GET_post_success", withExtension: "json")`
    static func gET_post_successJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gET_post_successJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GET_users-friends_success", withExtension: "json")`
    static func gET_usersFriends_successJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gET_usersFriends_successJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GET_users-search_success", withExtension: "json")`
    static func gET_usersSearch_successJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gET_usersSearch_successJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GET_users_success", withExtension: "json")`
    static func gET_users_successJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gET_users_successJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "POST_post-comments", withExtension: "json")`
    static func pOST_postCommentsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pOST_postCommentsJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "POST_user-checks_success", withExtension: "json")`
    static func pOST_userChecks_successJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pOST_userChecks_successJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 36 images.
  struct image {
    /// Image `addCancel`.
    static let addCancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "addCancel")
    /// Image `addPhoto`.
    static let addPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "addPhoto")
    /// Image `addQuestion`.
    static let addQuestion = Rswift.ImageResource(bundle: R.hostingBundle, name: "addQuestion")
    /// Image `addStatement`.
    static let addStatement = Rswift.ImageResource(bundle: R.hostingBundle, name: "addStatement")
    /// Image `cancelNav`.
    static let cancelNav = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancelNav")
    /// Image `changePhoto`.
    static let changePhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "changePhoto")
    /// Image `commentPost_disabled`.
    static let commentPost_disabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "commentPost_disabled")
    /// Image `commentPost_enabled`.
    static let commentPost_enabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "commentPost_enabled")
    /// Image `defaultAvatar`.
    static let defaultAvatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "defaultAvatar")
    /// Image `icon_comments`.
    static let icon_comments = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comments")
    /// Image `icon_moreActive`.
    static let icon_moreActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_moreActive")
    /// Image `icon_settings`.
    static let icon_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_settings")
    /// Image `icon_user`.
    static let icon_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_user")
    /// Image `logo_white`.
    static let logo_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_white")
    /// Image `logotype_01`.
    static let logotype_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logotype_01")
    /// Image `noComments`.
    static let noComments = Rswift.ImageResource(bundle: R.hostingBundle, name: "noComments")
    /// Image `pollRadio`.
    static let pollRadio = Rswift.ImageResource(bundle: R.hostingBundle, name: "pollRadio")
    /// Image `poll_results_selected`.
    static let poll_results_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "poll_results_selected")
    /// Image `poll_results`.
    static let poll_results = Rswift.ImageResource(bundle: R.hostingBundle, name: "poll_results")
    /// Image `sendinactive`.
    static let sendinactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendinactive")
    /// Image `tabbar_add_normal`.
    static let tabbar_add_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_add_normal")
    /// Image `tabbar_home_normal`.
    static let tabbar_home_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_normal")
    /// Image `tabbar_hot_normal`.
    static let tabbar_hot_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_hot_normal")
    /// Image `tabbar_profile_normal`.
    static let tabbar_profile_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_profile_normal")
    /// Image `tabbar_search_normal`.
    static let tabbar_search_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_search_normal")
    /// Image `user_list_bottom`.
    static let user_list_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_list_bottom")
    /// Image `user_list_middle`.
    static let user_list_middle = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_list_middle")
    /// Image `user_list_single`.
    static let user_list_single = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_list_single")
    /// Image `user_list_top`.
    static let user_list_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_list_top")
    /// Image `voteAgree01`.
    static let voteAgree01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voteAgree01")
    /// Image `voteAgree02`.
    static let voteAgree02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voteAgree02")
    /// Image `voteAgree03`.
    static let voteAgree03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voteAgree03")
    /// Image `voteDisagree01`.
    static let voteDisagree01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voteDisagree01")
    /// Image `voteDisagree02`.
    static let voteDisagree02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voteDisagree02")
    /// Image `voteDisagree03`.
    static let voteDisagree03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voteDisagree03")
    /// Image `vote_temp`.
    static let vote_temp = Rswift.ImageResource(bundle: R.hostingBundle, name: "vote_temp")
    
    /// `UIImage(named: "addCancel", bundle: ..., traitCollection: ...)`
    static func addCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addCancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addPhoto", bundle: ..., traitCollection: ...)`
    static func addPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addPhoto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addQuestion", bundle: ..., traitCollection: ...)`
    static func addQuestion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addQuestion, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addStatement", bundle: ..., traitCollection: ...)`
    static func addStatement(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addStatement, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cancelNav", bundle: ..., traitCollection: ...)`
    static func cancelNav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelNav, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "changePhoto", bundle: ..., traitCollection: ...)`
    static func changePhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changePhoto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "commentPost_disabled", bundle: ..., traitCollection: ...)`
    static func commentPost_disabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentPost_disabled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "commentPost_enabled", bundle: ..., traitCollection: ...)`
    static func commentPost_enabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentPost_enabled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "defaultAvatar", bundle: ..., traitCollection: ...)`
    static func defaultAvatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultAvatar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_comments", bundle: ..., traitCollection: ...)`
    static func icon_comments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comments, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_moreActive", bundle: ..., traitCollection: ...)`
    static func icon_moreActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_moreActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_settings", bundle: ..., traitCollection: ...)`
    static func icon_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_user", bundle: ..., traitCollection: ...)`
    static func icon_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_white", bundle: ..., traitCollection: ...)`
    static func logo_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logotype_01", bundle: ..., traitCollection: ...)`
    static func logotype_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logotype_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noComments", bundle: ..., traitCollection: ...)`
    static func noComments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noComments, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pollRadio", bundle: ..., traitCollection: ...)`
    static func pollRadio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pollRadio, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "poll_results", bundle: ..., traitCollection: ...)`
    static func poll_results(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poll_results, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "poll_results_selected", bundle: ..., traitCollection: ...)`
    static func poll_results_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poll_results_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sendinactive", bundle: ..., traitCollection: ...)`
    static func sendinactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendinactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_add_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_add_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_add_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_home_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_home_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_hot_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_hot_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_hot_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_profile_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_profile_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_profile_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_search_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_search_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_search_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_list_bottom", bundle: ..., traitCollection: ...)`
    static func user_list_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_list_bottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_list_middle", bundle: ..., traitCollection: ...)`
    static func user_list_middle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_list_middle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_list_single", bundle: ..., traitCollection: ...)`
    static func user_list_single(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_list_single, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_list_top", bundle: ..., traitCollection: ...)`
    static func user_list_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_list_top, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voteAgree01", bundle: ..., traitCollection: ...)`
    static func voteAgree01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voteAgree01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voteAgree02", bundle: ..., traitCollection: ...)`
    static func voteAgree02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voteAgree02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voteAgree03", bundle: ..., traitCollection: ...)`
    static func voteAgree03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voteAgree03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voteDisagree01", bundle: ..., traitCollection: ...)`
    static func voteDisagree01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voteDisagree01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voteDisagree02", bundle: ..., traitCollection: ...)`
    static func voteDisagree02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voteDisagree02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voteDisagree03", bundle: ..., traitCollection: ...)`
    static func voteDisagree03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voteDisagree03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vote_temp", bundle: ..., traitCollection: ...)`
    static func vote_temp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vote_temp, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 11 nibs.
  struct nib {
    /// Nib `AddPollVC`.
    static let addPollVC = _R.nib._AddPollVC()
    /// Nib `AddStatementVC`.
    static let addStatementVC = _R.nib._AddStatementVC()
    /// Nib `AnswerView`.
    static let answerView = _R.nib._AnswerView()
    /// Nib `ChooseTypeOfContentVC`.
    static let chooseTypeOfContentVC = _R.nib._ChooseTypeOfContentVC()
    /// Nib `CommentCell`.
    static let commentCell = _R.nib._CommentCell()
    /// Nib `DetailsStatementCell`.
    static let detailsStatementCell = _R.nib._DetailsStatementCell()
    /// Nib `DetailsStatementVC`.
    static let detailsStatementVC = _R.nib._DetailsStatementVC()
    /// Nib `HomeVC`.
    static let homeVC = _R.nib._HomeVC()
    /// Nib `PostsListVC`.
    static let postsListVC = _R.nib._PostsListVC()
    /// Nib `StatementCell`.
    static let statementCell = _R.nib._StatementCell()
    /// Nib `WaitingVC`.
    static let waitingVC = _R.nib._WaitingVC()
    
    /// `UINib(name: "AddPollVC", in: bundle)`
    static func addPollVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPollVC)
    }
    
    /// `UINib(name: "AddStatementVC", in: bundle)`
    static func addStatementVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addStatementVC)
    }
    
    /// `UINib(name: "AnswerView", in: bundle)`
    static func answerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.answerView)
    }
    
    /// `UINib(name: "ChooseTypeOfContentVC", in: bundle)`
    static func chooseTypeOfContentVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chooseTypeOfContentVC)
    }
    
    /// `UINib(name: "CommentCell", in: bundle)`
    static func commentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentCell)
    }
    
    /// `UINib(name: "DetailsStatementCell", in: bundle)`
    static func detailsStatementCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailsStatementCell)
    }
    
    /// `UINib(name: "DetailsStatementVC", in: bundle)`
    static func detailsStatementVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailsStatementVC)
    }
    
    /// `UINib(name: "HomeVC", in: bundle)`
    static func homeVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeVC)
    }
    
    /// `UINib(name: "PostsListVC", in: bundle)`
    static func postsListVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postsListVC)
    }
    
    /// `UINib(name: "StatementCell", in: bundle)`
    static func statementCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.statementCell)
    }
    
    /// `UINib(name: "WaitingVC", in: bundle)`
    static func waitingVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.waitingVC)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CommentCell`.
    static let commentCell: Rswift.ReuseIdentifier<CommentCell> = Rswift.ReuseIdentifier(identifier: "CommentCell")
    /// Reuse identifier `DetailsStatementCell`.
    static let detailsStatementCell: Rswift.ReuseIdentifier<DetailsStatementCell> = Rswift.ReuseIdentifier(identifier: "DetailsStatementCell")
    /// Reuse identifier `StatementCell`.
    static let statementCell: Rswift.ReuseIdentifier<StatementCell> = Rswift.ReuseIdentifier(identifier: "StatementCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DetailsStatementVC.validate()
      try _ChooseTypeOfContentVC.validate()
      try _AnswerView.validate()
      try _AddStatementVC.validate()
      try _WaitingVC.validate()
      try _StatementCell.validate()
      try _AddPollVC.validate()
      try _DetailsStatementCell.validate()
    }
    
    struct _AddPollVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddPollVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "changePhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'changePhoto' is used in nib 'AddPollVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "defaultAvatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defaultAvatar' is used in nib 'AddPollVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addPhoto' is used in nib 'AddPollVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AddStatementVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddStatementVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "changePhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'changePhoto' is used in nib 'AddStatementVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "defaultAvatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defaultAvatar' is used in nib 'AddStatementVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addPhoto' is used in nib 'AddStatementVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AnswerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AnswerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AnswerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "pollRadio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pollRadio' is used in nib 'AnswerView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ChooseTypeOfContentVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChooseTypeOfContentVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "addCancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addCancel' is used in nib 'ChooseTypeOfContentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addStatement", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addStatement' is used in nib 'ChooseTypeOfContentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addQuestion", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addQuestion' is used in nib 'ChooseTypeOfContentVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CommentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CommentCell
      
      let bundle = R.hostingBundle
      let identifier = "CommentCell"
      let name = "CommentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell
      }
      
      fileprivate init() {}
    }
    
    struct _DetailsStatementCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DetailsStatementCell
      
      let bundle = R.hostingBundle
      let identifier = "DetailsStatementCell"
      let name = "DetailsStatementCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DetailsStatementCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailsStatementCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "defaultAvatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defaultAvatar' is used in nib 'DetailsStatementCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_comments", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_comments' is used in nib 'DetailsStatementCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_moreActive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_moreActive' is used in nib 'DetailsStatementCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_user' is used in nib 'DetailsStatementCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _DetailsStatementVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailsStatementVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "defaultAvatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defaultAvatar' is used in nib 'DetailsStatementVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commentPost_enabled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentPost_enabled' is used in nib 'DetailsStatementVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commentPost_disabled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentPost_disabled' is used in nib 'DetailsStatementVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PostsListVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PostsListVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _StatementCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = StatementCell
      
      let bundle = R.hostingBundle
      let identifier = "StatementCell"
      let name = "StatementCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> StatementCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StatementCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "defaultAvatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defaultAvatar' is used in nib 'StatementCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_comments", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_comments' is used in nib 'StatementCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_moreActive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_moreActive' is used in nib 'StatementCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_user' is used in nib 'StatementCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _WaitingVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WaitingVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "noComments", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noComments' is used in nib 'WaitingVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
